/*
This build.gradle has been tweaked. Don't build other mods with this or this with the default Fabric.
 */


buildscript {
	/*repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}*/
	dependencies {
		//Jfrog for auto publish on jcenter
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
		//classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
	}
}

plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
	id 'maven-publish'
	//publish mod to other places :D
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "com.github.breadmoirai.github-release" version "2.2.12"
	id "com.modrinth.minotaur" version "1.1.0"
}

apply plugin: 'com.jfrog.bintray'

//Import jfrog keys from file (not included in the git repo :D)
boolean keys_imported = new File("keys.properties").exists()
//and well... serialize it
if(keys_imported) {
	file("keys.properties").withReader {
		Properties props = new Properties()
		props.load(it)
		project.ext.keys = props
	}
}
repositories{
	mavenLocal()
	jcenter()
	maven{
		url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.archives_base_name}-for-MC${project.minecraft_version}"
version = project.mod_version
group = project.maven_group


String version_name = project.version, isRelease, changes ="""changelog
"""

//isRelease = "release"
isRelease = "beta"
//isRelease = "alpha"
//changes = "This is a test for automated publishing, don't use this"


minecraft {
	//accessWidener = file("src/main/resources/emotecraft.accesswidener")
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	//mappings minecraft.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
	include "io.github.prospector:modmenu:${project.modmenu_version}"
	modImplementation "me.shedaniel.cloth:config-2:${project.cloth_version}"
	include "me.shedaniel.cloth:config-2:${project.cloth_version}"

	modImplementation "com.kosmx.bendylib:bendy-lib:${project.bendylib_version}"
	include "com.kosmx.bendylib:bendy-lib:${project.bendylib_version}"
	//
	//other dependency(ies)

	modImplementation "pm.c7.perspective:PerspectiveModRedux:0.0.5"



	//Spigot stuff
	implementation("org.spigotmc:spigot-api:${project.spigot_api}")

	//include(files("bendy-lib-0.0.0-dev.jar"))

}

tasks.withType(JavaCompile){
	options.compilerArgs << '-Xlint:unchecked'
	options.deprecation = true	//deprecated warning on compile
}

tasks.withType(Copy){
	eachFile{
		rename{
			String filename->filename = filename.toLowerCase()
		}
		//Rename every file to lowercase. This is essential for the translations to work
		//Possibly creates other problems on other operating systems
	}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}
	from(sourceSets.main.resources.srcDirs) {
		include "plugin.yml"
		expand version: project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
		exclude "plugin.yml"
	}
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	manifest {
		attributes("Main-Class": "com.kosmx.emoteStandalone.StandaloneServer")
	}
	from "LICENSE"
}

import com.modrinth.minotaur.TaskModrinthUpload


// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			//artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
			//	builtBy remapJar
			//}
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		mavenLocal()
	}
	dependencies {
		//@Nullable essential for mc modding
		compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
	}
}

if(keys_imported){
task publishModrinth (type: TaskModrinthUpload) {
	//BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	//System.out.println("Enter a Github Access Token: ");
	//System.out.println("Enter release type")
	//isRelease = br.readLine()
	//System.out.println("Enter the version name:");
	//version_name = br.readLine();
	//System.out.println("Enter changelog:");
	//changes = br.readLine();
	releaseType = isRelease
	token = project.keys.modrinth_token; // Get the GitHub Access Token you got from the basics part of this tutorial.
	projectId = "pZ2wrerK" // Enter your modrinth mod ID here.
	//System.out.println("Enter the version number:");
	versionNumber = project.version
	//versionName = version_name;
	uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
	//System.out.println("Enter the game version number: (See minotaur docs for valids)");
	addGameVersion(project.minecraft_version);
	changelog = changes;
	addLoader("fabric")
}

//bintray upload script
bintray {
	if(keys_imported) {
		user = project.keys.bintray_user
		key = project.keys.bintray_key
	}
	pkg {
		repo = 'Emotecraft'
		name = 'Emotecraft'
		//userOrg = 'kosmx'
		licenses = ['CC0-1.0']
		vcsUrl = 'https://github.com/KosmX/emotes.git'
		version {
			version {
				name = project.version
				desc = 'Minecraft mod'
				githubRepo = "kosmx/emotes"
				released  = new Date()
				vcsTag = project.version
				//attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
			}
		}
	}
	publications = ['mavenJava']
}

githubRelease {
	token project.keys.github_token // This is your personal access token with Repo permissions
	// You get this from your user settings > developer settings > Personal Access Tokens
	owner "KosmX" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
	repo "emotes" // by default this is set to your project name
	tagName project.version // by default this is set to "v${project.version}"
	targetCommitish "master" // by default this is set to "master"
	releaseName project.version // Release title, by default this is the same as the tagName
	body "" // by default this is empty
	draft false // by default this is false
	prerelease false // by default this is false
	releaseAssets jar, remapJar, sourcesJar // this points to which files you want to upload as assets with your release

	overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
	dryRun false // by default false; you can use this to see what actions would be taken without making a release
	apiEndpoint "https://api.github.com" // should only change for github enterprise users
	client // This is the okhttp client used for http requests
	body changes
}

curseforge {
	apiKey = project.keys.curseforge_key
	project {
		id = '397809'
		changelogType = "markdown"
		//changelog = '[See on Github](https://github.com/KosmX/emotes/commits/master)'
		changelog = changes
		releaseType = isRelease
		addGameVersion project.minecraft_version
		addGameVersion "Fabric"
		addGameVersion "Java 8"
		addGameVersion "Java 9"
		addGameVersion "Java 10"


		relations {
			requiredDependency 'fabric-api'
			embeddedLibrary 'cloth-config'
			embeddedLibrary 'modmenu'
			optionalDependency 'perspective-mod-redux'
		}

		options {
			forgeGradleIntegration = false // FABRIC MOD
		}

		mainArtifact(remapJar) {
			//displayName = archivesBaseName
		}
	}
}

task autoPublish{
	//:D
}
autoPublish.dependsOn(build)
autoPublish.finalizedBy(publishModrinth, bintrayUpload, tasks.githubRelease , tasks.curseforge, publish)
}